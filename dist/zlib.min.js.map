{"version":3,"file":"zlib.min.js","sources":["../src/mod.js","../src/bundle.js","../dist-wasm/zlib-module.js?raw","../dist-wasm/zlib-module.wasm?embed"],"sourcesContent":["// deno-lint-ignore-file no-this-alias\n/**\n * CompressionStream & DecompressionStream Polyfill\n */\n\n// zlib constants\nconst Z_NO_FLUSH = 0;\nconst Z_PARTIAL_FLUSH = 1;\nconst Z_SYNC_FLUSH = 2;\nconst Z_FULL_FLUSH = 3;\nconst Z_FINISH = 4;\nconst Z_OK = 0;\nconst Z_STREAM_END = 1;\nconst Z_DEFAULT_COMPRESSION = -1;\nconst Z_BUF_ERROR = -5;\n\n// Buffer sizes\nconst DEFAULT_INPUT_SIZE = 32768;\nconst DEFAULT_OUTPUT_SIZE = 32768;\nconst STREAM_STRUCT_SIZE = 56;\nconst DEFLATE64_WINDOW_SIZE = 65536;\n\n// Format strings\nconst FORMAT_DEFLATE = \"deflate\";\nconst FORMAT_DEFLATE_RAW = \"deflate-raw\";\nconst FORMAT_GZIP = \"gzip\";\nconst FORMAT_DEFLATE64 = \"deflate64\";\nconst FORMAT_DEFLATE64_RAW = \"deflate64-raw\";\n\n// Window bits for different formats\nconst DEFLATE_WINDOW_BITS = 15;\nconst DEFLATE_RAW_WINDOW_BITS = -15;\nconst GZIP_WINDOW_BITS = 31;\n\n// Method constants\nconst DEFLATE_METHOD = 8;\nconst DEFLATE_MEM_LEVEL = 8;\nconst DEFLATE_STRATEGY = 0;\n\n// Function signatures for emscripten\nconst SIGNATURE_III = \"iii\";\nconst SIGNATURE_IIII = \"iiii\";\n\n// zlib version string\nconst ZLIB_VERSION = \"1.3.1.1-motley\";\n\n// Function names\nconst FUNC_DEFLATE_INIT2 = \"deflateInit2_\";\nconst FUNC_INFLATE_INIT2 = \"inflateInit2_\";\nconst FUNC_INFLATE_BACK9_INIT = \"inflateBack9Init_\";\nconst FUNC_INFLATE_BACK9 = \"inflateBack9\";\nconst FUNC_DEFLATE = \"_deflate\";\nconst FUNC_INFLATE = \"_inflate\";\nconst FUNC_DEFLATE_END = \"_deflateEnd\";\nconst FUNC_INFLATE_END = \"_inflateEnd\";\nconst FUNC_INFLATE_BACK9_END = \"_inflateBack9End\";\nconst FUNC_MALLOC = \"_malloc\";\nconst FUNC_FREE = \"_free\";\nconst FUNC_CRC32 = \"_crc32\";\n\n// Method names\nconst METHOD_COMPRESS = \"compress\";\nconst METHOD_DECOMPRESS = \"decompress\";\n\n// Type names\nconst TYPE_NUMBER = \"number\";\nconst TYPE_STRING = \"string\";\n\n// Other constants\nconst FLUSH_MODE_AUTO = \"auto\";\nconst HEX_PAD_LENGTH = 8;\nconst HEX_PAD_CHAR = '0';\nconst DEFAULT_COMPRESSOR_LEVEL = 6;\n\n// Error messages\nconst MSG_COMPRESSION_INIT_FAILED = \"Compression initialization failed\";\nconst MSG_DECOMPRESSION_INIT_FAILED = \"Decompression initialization failed\";\nconst MSG_COMPRESSION_FAILED = \"Compression failed\";\nconst MSG_DECOMPRESSION_FAILED = \"Decompression failed\";\nconst MSG_DEFLATE64_DECOMPRESSION_FAILED = \"Deflate64 decompression failed with error code\";\nconst MSG_DEFLATE64_DECOMPRESSION_INCOMPLETE = \"Deflate64 decompression incomplete: expected end of stream but got error code\";\nconst MSG_CRC32_MISMATCH = \"CRC32 mismatch: expected\";\nconst MSG_CHUNK_SIZE_EXCEEDED = \"Chunk size\";\nconst MSG_EXCEEDS_BUFFER_SIZE = \"exceeds buffer size\";\nconst MSG_UNSUPPORTED_FORMAT = \"Unsupported format\";\n\nconst FLUSH_MODES = {\n\tnone: Z_NO_FLUSH,\n\tpartial: Z_PARTIAL_FLUSH,\n\tsync: Z_SYNC_FLUSH,\n\tfull: Z_FULL_FLUSH,\n\tfinish: Z_FINISH,\n\tauto: Z_NO_FLUSH,\n};\n\nlet zlibModule, zlibModulePromise;\n\nclass BufferPool {\n\tconstructor() {\n\t\tconst bufferPool = this;\n\t\tbufferPool.pools = new Map();\n\t\tbufferPool.maxPoolSize = 8;\n\t}\n\n\tget(size) {\n\t\tconst bufferPool = this;\n\t\tif (!bufferPool.pools.has(size)) {\n\t\t\tbufferPool.pools.set(size, []);\n\t\t}\n\t\tconst pool = bufferPool.pools.get(size);\n\t\tif (pool.length > 0) {\n\t\t\treturn pool.pop();\n\t\t}\n\t\treturn new Uint8Array(size);\n\t}\n\n\trelease(buffer) {\n\t\tconst bufferPool = this;\n\t\tconst size = buffer.length;\n\t\tif (!bufferPool.pools.has(size)) {\n\t\t\tbufferPool.pools.set(size, []);\n\t\t}\n\t\tconst pool = bufferPool.pools.get(size);\n\t\tif (pool.length < bufferPool.maxPoolSize) {\n\t\t\tpool.push(buffer);\n\t\t}\n\t}\n\n\tclear() {\n\t\tconst bufferPool = this;\n\t\tbufferPool.pools.clear();\n\t}\n}\n\nconst bufferPool = new BufferPool();\n\nfunction initModule(moduleCode, wasmBinary) {\n\tconst moduleFunction = new Function([], moduleCode + \";return ZlibModule\");\n\tconst ZlibModuleFactory = moduleFunction([]);\n\tzlibModulePromise = ZlibModuleFactory({ wasmBinary });\n}\n\nclass ZlibCompressor {\n\tconstructor(level = Z_DEFAULT_COMPRESSION, format = FORMAT_DEFLATE, computeCRC32 = false) {\n\t\tconst zlibCompressor = this;\n\t\tzlibCompressor.level = level;\n\t\tzlibCompressor.format = format;\n\t\tzlibCompressor.streamPtr = null;\n\t\tzlibCompressor.inputPtr = null;\n\t\tzlibCompressor.outputPtr = null;\n\t\tzlibCompressor.inputSize = DEFAULT_INPUT_SIZE;\n\t\tzlibCompressor.outputSize = DEFAULT_OUTPUT_SIZE;\n\t\tconst isRawFormat = format === FORMAT_DEFLATE_RAW;\n\t\tzlibCompressor.computeCRC32 = isRawFormat && computeCRC32;\n\t\tzlibCompressor.crc32 = 0;\n\t}\n\n\tasync initialize() {\n\t\tconst zlibCompressor = this;\n\t\tif (!zlibModule) {\n\t\t\tzlibModule = await zlibModulePromise;\n\t\t}\n\t\tzlibCompressor.streamPtr = zlibModule[FUNC_MALLOC](STREAM_STRUCT_SIZE);\n\t\tzlibCompressor.inputPtr = zlibModule[FUNC_MALLOC](zlibCompressor.inputSize);\n\t\tzlibCompressor.outputPtr = zlibModule[FUNC_MALLOC](zlibCompressor.outputSize);\n\t\tinitStream(zlibModule, zlibCompressor.streamPtr);\n\t\tconst result = zlibModule.ccall(FUNC_DEFLATE_INIT2, TYPE_NUMBER, [\n\t\t\tTYPE_NUMBER,\n\t\t\tTYPE_NUMBER,\n\t\t\tTYPE_NUMBER,\n\t\t\tTYPE_NUMBER,\n\t\t\tTYPE_NUMBER,\n\t\t\tTYPE_NUMBER,\n\t\t\tTYPE_STRING,\n\t\t\tTYPE_NUMBER,\n\t\t], [zlibCompressor.streamPtr, zlibCompressor.level, DEFLATE_METHOD, getWindowBits(zlibCompressor.format), DEFLATE_MEM_LEVEL, DEFLATE_STRATEGY, ZLIB_VERSION, STREAM_STRUCT_SIZE]);\n\t\tif (result !== 0) {\n\t\t\tthrow new Error(MSG_COMPRESSION_INIT_FAILED + \": \" + result);\n\t\t}\n\t}\n\n\tcompress(data, finish = false, flushMode = FLUSH_MODE_AUTO) {\n\t\tconst zlibCompressor = this;\n\t\tif (data.length === 0 && !finish) {\n\t\t\treturn new Uint8Array(0);\n\t\t}\n\t\tif (data.length > zlibCompressor.inputSize) {\n\t\t\tconst results = [];\n\t\t\tlet offset = 0;\n\t\t\twhile (offset < data.length) {\n\t\t\t\tconst chunkSize = Math.min(zlibCompressor.inputSize, data.length - offset);\n\t\t\t\tconst chunk = data.slice(offset, offset + chunkSize);\n\t\t\t\tconst isLastChunk = offset + chunkSize >= data.length;\n\t\t\t\tconst chunkResult = zlibCompressor.compressSingleChunk(chunk, finish && isLastChunk, flushMode);\n\t\t\t\tif (chunkResult.length > 0) {\n\t\t\t\t\tresults.push(chunkResult);\n\t\t\t\t}\n\t\t\t\toffset += chunkSize;\n\t\t\t}\n\t\t\tconst totalLength = results.reduce((sum, chunk) => sum + chunk.length, 0);\n\t\t\tconst combined = bufferPool.get(totalLength);\n\t\t\tlet combinedOffset = 0;\n\t\t\tfor (const result of results) {\n\t\t\t\tcombined.set(result, combinedOffset);\n\t\t\t\tcombinedOffset += result.length;\n\t\t\t}\n\t\t\treturn combined.subarray(0, totalLength);\n\t\t}\n\t\treturn zlibCompressor.compressSingleChunk(data, finish, flushMode);\n\t}\n\n\tcompressSingleChunk(data, finish = false, flushMode = FLUSH_MODE_AUTO) {\n\t\tconst zlibCompressor = this;\n\t\tif (data.length > zlibCompressor.inputSize) {\n\t\t\tthrow new Error(MSG_CHUNK_SIZE_EXCEEDED + \" \" + data.length + \" \" + MSG_EXCEEDS_BUFFER_SIZE + \" \" + zlibCompressor.inputSize);\n\t\t}\n\t\tif (zlibCompressor.level === 0 && zlibCompressor.format === FORMAT_DEFLATE_RAW) {\n\t\t\tif (zlibCompressor.computeCRC32 && data.length > 0) {\n\t\t\t\tconst tempPtr = zlibModule[FUNC_MALLOC](data.length);\n\t\t\t\ttry {\n\t\t\t\t\tzlibModule.HEAPU8.set(data, tempPtr);\n\t\t\t\t\tzlibCompressor.crc32 = zlibModule[FUNC_CRC32](zlibCompressor.crc32, tempPtr, data.length);\n\t\t\t\t} finally {\n\t\t\t\t\tzlibModule[FUNC_FREE](tempPtr);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn data;\n\t\t}\n\n\t\tcopyToWasmMemory(zlibModule, data, zlibCompressor.inputPtr);\n\t\tif (zlibCompressor.computeCRC32 && data.length > 0) {\n\t\t\tzlibCompressor.crc32 = zlibModule[FUNC_CRC32](zlibCompressor.crc32, zlibCompressor.inputPtr, data.length);\n\t\t}\n\t\tconst streamPtrU32 = zlibCompressor.streamPtr >>> 2;\n\t\tzlibModule.HEAPU32[streamPtrU32 + 0] = zlibCompressor.inputPtr;\n\t\tzlibModule.HEAPU32[streamPtrU32 + 1] = data.length;\n\t\tzlibModule.HEAPU32[streamPtrU32 + 3] = zlibCompressor.outputPtr;\n\t\tzlibModule.HEAPU32[streamPtrU32 + 4] = zlibCompressor.outputSize;\n\t\tconst flushType = finish ? Z_FINISH : (FLUSH_MODES[flushMode] || Z_NO_FLUSH);\n\t\tconst result = zlibModule[FUNC_DEFLATE](zlibCompressor.streamPtr, flushType);\n\t\tif (result < 0 || (finish && result !== Z_STREAM_END) || (!finish && result !== Z_OK)) {\n\t\t\tthrow new Error(MSG_COMPRESSION_FAILED + \": \" + result);\n\t\t}\n\t\tconst availOut = zlibModule.HEAPU32[streamPtrU32 + 4];\n\t\tconst outputLength = zlibCompressor.outputSize - availOut;\n\t\treturn copyFromWasmMemory(zlibModule, zlibCompressor.outputPtr, outputLength);\n\t}\n\n\tfinish() {\n\t\tconst zlibCompressor = this;\n\t\tconst finalData = zlibCompressor.compress(new Uint8Array(0), true);\n\t\tzlibCompressor.cleanup();\n\t\treturn finalData;\n\t}\n\n\tcleanup() {\n\t\tconst zlibCompressor = this;\n\t\tif (zlibModule && zlibCompressor.streamPtr) {\n\t\t\tzlibModule[FUNC_DEFLATE_END](zlibCompressor.streamPtr);\n\t\t\tzlibModule[FUNC_FREE](zlibCompressor.streamPtr);\n\t\t\tzlibModule[FUNC_FREE](zlibCompressor.inputPtr);\n\t\t\tzlibModule[FUNC_FREE](zlibCompressor.outputPtr);\n\t\t\tzlibCompressor.streamPtr = null;\n\t\t\tzlibCompressor.inputPtr = null;\n\t\t\tzlibCompressor.outputPtr = null;\n\t\t}\n\t}\n}\n\nclass ZlibDecompressor {\n\tconstructor(format = FORMAT_DEFLATE, computeCRC32 = false, expectedCRC32) {\n\t\tconst zlibDecompressor = this;\n\t\tzlibDecompressor.format = format;\n\t\tzlibDecompressor.streamPtr = null;\n\t\tzlibDecompressor.inputPtr = null;\n\t\tzlibDecompressor.outputPtr = null;\n\t\tzlibDecompressor.windowPtr = null;\n\t\tzlibDecompressor.inputSize = DEFAULT_INPUT_SIZE;\n\t\tzlibDecompressor.outputSize = DEFAULT_OUTPUT_SIZE;\n\t\tzlibDecompressor.isDeflate64 = format === FORMAT_DEFLATE64 || format === FORMAT_DEFLATE64_RAW;\n\t\tconst isRawFormat = format === FORMAT_DEFLATE_RAW || format === FORMAT_DEFLATE64_RAW;\n\t\tzlibDecompressor.computeCRC32 = isRawFormat && computeCRC32;\n\t\tzlibDecompressor.expectedCRC32 = expectedCRC32;\n\t\tzlibDecompressor.crc32 = 0;\n\t}\n\n\tasync initialize() {\n\t\tconst zlibDecompressor = this;\n\t\tif (!zlibModule) {\n\t\t\tzlibModule = await zlibModulePromise;\n\t\t}\n\t\tzlibDecompressor.streamPtr = zlibModule[FUNC_MALLOC](STREAM_STRUCT_SIZE);\n\t\tzlibDecompressor.inputPtr = zlibModule[FUNC_MALLOC](zlibDecompressor.inputSize);\n\t\tzlibDecompressor.outputPtr = zlibModule[FUNC_MALLOC](zlibDecompressor.outputSize);\n\t\tinitStream(zlibModule, zlibDecompressor.streamPtr);\n\t\tlet result;\n\t\tif (zlibDecompressor.isDeflate64) {\n\t\t\tzlibDecompressor.windowPtr = zlibModule[FUNC_MALLOC](DEFLATE64_WINDOW_SIZE);\n\t\t\tresult = zlibModule.ccall(FUNC_INFLATE_BACK9_INIT, TYPE_NUMBER, [TYPE_NUMBER, TYPE_NUMBER, TYPE_STRING, TYPE_NUMBER], [\n\t\t\t\tzlibDecompressor.streamPtr,\n\t\t\t\tzlibDecompressor.windowPtr,\n\t\t\t\tZLIB_VERSION,\n\t\t\t\tSTREAM_STRUCT_SIZE,\n\t\t\t]);\n\t\t} else {\n\t\t\tresult = zlibModule.ccall(FUNC_INFLATE_INIT2, TYPE_NUMBER, [TYPE_NUMBER, TYPE_NUMBER, TYPE_STRING, TYPE_NUMBER], [\n\t\t\t\tzlibDecompressor.streamPtr,\n\t\t\t\tgetWindowBits(zlibDecompressor.format),\n\t\t\t\tZLIB_VERSION,\n\t\t\t\tSTREAM_STRUCT_SIZE,\n\t\t\t]);\n\t\t}\n\t\tif (result !== 0) {\n\t\t\tthrow new Error(MSG_DECOMPRESSION_INIT_FAILED + \": \" + result);\n\t\t}\n\t}\n\n\tdecompress(data, finish = false, flushMode = FLUSH_MODE_AUTO) {\n\t\tconst zlibDecompressor = this;\n\t\tif (data.length === 0 && !finish) {\n\t\t\treturn new Uint8Array(0);\n\t\t}\n\t\tif (zlibDecompressor.isDeflate64) {\n\t\t\treturn zlibDecompressor.decompressDeflate64(data, finish);\n\t\t}\n\t\tconst results = [];\n\t\tlet totalInputProcessed = 0;\n\t\twhile (totalInputProcessed < data.length || finish) {\n\t\t\tconst remainingInput = data.length - totalInputProcessed;\n\t\t\tconst inputChunkSize = Math.min(remainingInput, zlibDecompressor.inputSize);\n\t\t\tif (inputChunkSize > 0) {\n\t\t\t\tcopyToWasmMemory(\n\t\t\t\t\tzlibModule,\n\t\t\t\t\tdata.subarray(totalInputProcessed, totalInputProcessed + inputChunkSize),\n\t\t\t\t\tzlibDecompressor.inputPtr,\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst streamPtrU32 = zlibDecompressor.streamPtr >>> 2;\n\t\t\tzlibModule.HEAPU32[streamPtrU32 + 0] = zlibDecompressor.inputPtr;\n\t\t\tzlibModule.HEAPU32[streamPtrU32 + 1] = inputChunkSize;\n\t\t\tzlibModule.HEAPU32[streamPtrU32 + 3] = zlibDecompressor.outputPtr;\n\t\t\tzlibModule.HEAPU32[streamPtrU32 + 4] = zlibDecompressor.outputSize;\n\t\t\tconst isLastChunk = totalInputProcessed + inputChunkSize >= data.length;\n\t\t\tconst flushType = (finish && isLastChunk) ? Z_FINISH : (FLUSH_MODES[flushMode] || Z_SYNC_FLUSH);\n\t\t\tconst result = zlibModule[FUNC_INFLATE](zlibDecompressor.streamPtr, flushType);\n\t\t\tif (result < 0 && result !== Z_BUF_ERROR) {\n\t\t\t\tthrow new Error(MSG_DECOMPRESSION_FAILED + \": \" + result);\n\t\t\t}\n\t\t\tconst availOut = zlibModule.HEAPU32[streamPtrU32 + 4];\n\t\t\tconst outputLength = zlibDecompressor.outputSize - availOut;\n\t\t\tif (outputLength > 0) {\n\t\t\t\tconst outputChunk = copyFromWasmMemory(zlibModule, zlibDecompressor.outputPtr, outputLength);\n\t\t\t\tif (zlibDecompressor.computeCRC32) {\n\t\t\t\t\tzlibDecompressor.crc32 = zlibModule[FUNC_CRC32](zlibDecompressor.crc32, zlibDecompressor.outputPtr, outputLength);\n\t\t\t\t}\n\t\t\t\tresults.push(outputChunk);\n\t\t\t}\n\t\t\tconst inputProcessed = zlibModule.HEAPU32[streamPtrU32 + 1];\n\t\t\ttotalInputProcessed += inputChunkSize - inputProcessed;\n\t\t\tif (result === Z_STREAM_END) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (finish && isLastChunk && result !== Z_STREAM_END) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (totalInputProcessed < data.length) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tconst totalLength = results.reduce((sum, chunk) => sum + chunk.length, 0);\n\t\tconst output = bufferPool.get(totalLength);\n\t\tlet offset = 0;\n\t\tfor (const chunk of results) {\n\t\t\toutput.set(chunk, offset);\n\t\t\toffset += chunk.length;\n\t\t}\n\t\treturn output.subarray(0, totalLength);\n\t}\n\n\tdecompressDeflate64(data, finish) {\n\t\tconst zlibDecompressor = this;\n\t\tif (zlibDecompressor.deflate64Complete) {\n\t\t\treturn new Uint8Array(0);\n\t\t}\n\t\t\n\t\t// Initialize streaming state if not already done\n\t\tif (zlibDecompressor.deflate64InputBuffer) {\n\t\t\t// Append new data to existing buffer\n\t\t\tif (data.length > 0) {\n\t\t\t\tconst newBuffer = new Uint8Array(zlibDecompressor.deflate64InputBuffer.length + data.length);\n\t\t\t\tnewBuffer.set(zlibDecompressor.deflate64InputBuffer);\n\t\t\t\tnewBuffer.set(data, zlibDecompressor.deflate64InputBuffer.length);\n\t\t\t\tzlibDecompressor.deflate64InputBuffer = newBuffer;\n\t\t\t}\n\t\t} else {\n\t\t\t// First call - set up for streaming\n\t\t\tzlibDecompressor.deflate64InputBuffer = data.length > 0 ? new Uint8Array(data) : new Uint8Array(0);\n\t\t\tzlibDecompressor.deflate64StreamStarted = false;\n\t\t}\n\t\t\n\t\t// Only start the single inflateBack9 call when we have enough data or are finishing\n\t\t// Once started, we must let it complete\n\t\tif (!zlibDecompressor.deflate64StreamStarted) {\n\t\t\tconst shouldStart = finish || zlibDecompressor.deflate64InputBuffer.length >= 1024;\n\t\t\tif (!shouldStart) {\n\t\t\t\treturn new Uint8Array(0);\n\t\t\t}\n\t\t\tzlibDecompressor.deflate64StreamStarted = true;\n\t\t}\n\t\t\n\t\t// For subsequent calls after streaming has started, just append data and wait for finish\n\t\tif (zlibDecompressor.deflate64StreamStarted && !finish) {\n\t\t\treturn new Uint8Array(0);\n\t\t}\n\t\t\n\t\t// Now we have all the data we're going to get, process it all at once\n\t\tconst inputData = zlibDecompressor.deflate64InputBuffer;\n\t\tconst results = [];\n\t\t\n\t\t// Ensure we have enough space in the input buffer\n\t\tif (inputData.length > zlibDecompressor.inputSize) {\n\t\t\tzlibModule[FUNC_FREE](zlibDecompressor.inputPtr);\n\t\t\tzlibDecompressor.inputSize = Math.max(inputData.length, zlibDecompressor.inputSize * 2);\n\t\t\tzlibDecompressor.inputPtr = zlibModule[FUNC_MALLOC](zlibDecompressor.inputSize);\n\t\t}\n\t\t\n\t\tcopyToWasmMemory(zlibModule, inputData, zlibDecompressor.inputPtr);\n\t\t\n\t\tconst inFunc = zlibModule.addFunction((_, bufPtr) => {\n\t\t\tif (inputData.length === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tzlibModule.HEAPU32[bufPtr >>> 2] = zlibDecompressor.inputPtr;\n\t\t\treturn inputData.length;\n\t\t}, SIGNATURE_III);\n\t\t\n\t\tconst outFunc = zlibModule.addFunction((_, buf, len) => {\n\t\t\tif (len > 0) {\n\t\t\t\tif (zlibDecompressor.computeCRC32) {\n\t\t\t\t\tzlibDecompressor.crc32 = zlibModule[FUNC_CRC32](zlibDecompressor.crc32, buf, len);\n\t\t\t\t}\n\t\t\t\tconst outputChunk = copyFromWasmMemory(zlibModule, buf, len);\n\t\t\t\tresults.push(outputChunk);\n\t\t\t}\n\t\t\treturn 0;\n\t\t}, SIGNATURE_IIII);\n\t\t\n\t\tconst result = zlibModule.ccall(FUNC_INFLATE_BACK9, TYPE_NUMBER, [TYPE_NUMBER, TYPE_NUMBER, TYPE_NUMBER, TYPE_NUMBER, TYPE_NUMBER], [\n\t\t\tzlibDecompressor.streamPtr,\n\t\t\tinFunc,\n\t\t\t0,\n\t\t\toutFunc,\n\t\t\t0,\n\t\t]);\n\t\t\n\t\tzlibModule.removeFunction(inFunc);\n\t\tzlibModule.removeFunction(outFunc);\n\t\t\n\t\tif (result === 1) {\n\t\t\tzlibDecompressor.deflate64Complete = true;\n\t\t\tzlibDecompressor.deflate64InputBuffer = new Uint8Array(0);\n\t\t} else if (result < 0) {\n\t\t\tconst msg = MSG_DEFLATE64_DECOMPRESSION_FAILED;\n\t\t\tthrow new Error(msg + \": \" + result);\n\t\t} else if (finish && result !== 1) {\n\t\t\tconst msg = MSG_DEFLATE64_DECOMPRESSION_INCOMPLETE;\n\t\t\tthrow new Error(msg + \": \" + result);\n\t\t}\n\t\t\n\t\tconst totalLength = results.reduce((sum, chunk) => sum + chunk.length, 0);\n\t\tconst output = bufferPool.get(totalLength);\n\t\tlet outputOffset = 0;\n\t\tfor (const chunk of results) {\n\t\t\toutput.set(chunk, outputOffset);\n\t\t\toutputOffset += chunk.length;\n\t\t}\n\t\treturn output.subarray(0, totalLength);\n\t}\n\n\tfinish() {\n\t\tconst zlibDecompressor = this;\n\t\tconst finalData = zlibDecompressor.decompress(new Uint8Array(0), true);\n\t\tzlibDecompressor.cleanup();\n\t\tif (zlibDecompressor.expectedCRC32 !== undefined && zlibDecompressor.computeCRC32 && zlibDecompressor.crc32 !== zlibDecompressor.expectedCRC32) {\n\t\t\tthrow new Error(MSG_CRC32_MISMATCH + \" \" + zlibDecompressor.expectedCRC32.toString(16).toUpperCase().padStart(HEX_PAD_LENGTH, HEX_PAD_CHAR) + \", got \" + zlibDecompressor.crc32.toString(16).toUpperCase().padStart(HEX_PAD_LENGTH, HEX_PAD_CHAR));\n\t\t}\n\t\treturn finalData;\n\t}\n\n\tcleanup() {\n\t\tconst zlibDecompressor = this;\n\t\tif (zlibModule && zlibDecompressor.streamPtr) {\n\t\t\tif (zlibDecompressor.isDeflate64) {\n\t\t\t\tzlibModule[FUNC_INFLATE_BACK9_END](zlibDecompressor.streamPtr);\n\t\t\t\tif (zlibDecompressor.windowPtr) {\n\t\t\t\t\tzlibModule[FUNC_FREE](zlibDecompressor.windowPtr);\n\t\t\t\t\tzlibDecompressor.windowPtr = null;\n\t\t\t\t}\n\t\t\t\t// Clean up deflate64 streaming state\n\t\t\t\tzlibDecompressor.deflate64InputBuffer = null;\n\t\t\t\tzlibDecompressor.deflate64StreamStarted = false;\n\t\t\t} else {\n\t\t\t\tzlibModule[FUNC_INFLATE_END](zlibDecompressor.streamPtr);\n\t\t\t}\n\t\t\tzlibModule[FUNC_FREE](zlibDecompressor.streamPtr);\n\t\t\tzlibModule[FUNC_FREE](zlibDecompressor.inputPtr);\n\t\t\tzlibModule[FUNC_FREE](zlibDecompressor.outputPtr);\n\t\t\tzlibDecompressor.streamPtr = null;\n\t\t\tzlibDecompressor.inputPtr = null;\n\t\t\tzlibDecompressor.outputPtr = null;\n\t\t}\n\t}\n}\n\nclass BaseStreamPolyfill {\n\tconstructor(format, processorClass, methodName, processorArgs = []) {\n\t\tconst baseStream = this;\n\t\tbaseStream.format = format;\n\t\tbaseStream.processor = null;\n\t\tbaseStream._createTransformStream(processorClass, methodName, processorArgs);\n\t}\n\n\t_createTransformStream(ProcessorClass, methodName, processorArgs) {\n\t\tconst baseStream = this;\n\t\tconst transformStream = new TransformStream({\n\t\t\tstart: async () => {\n\t\t\t\tbaseStream.processor = new ProcessorClass(...processorArgs);\n\t\t\t\tawait baseStream.processor.initialize();\n\t\t\t},\n\t\t\ttransform: (chunk, controller) => {\n\t\t\t\tconst data = convertChunkToUint8Array(chunk);\n\t\t\t\tconst result = baseStream.processor[methodName](data, false);\n\t\t\t\tif (result.length > 0) {\n\t\t\t\t\tcontroller.enqueue(result);\n\t\t\t\t}\n\t\t\t},\n\t\t\tflush: (controller) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst finalData = baseStream.processor.finish();\n\t\t\t\t\tif (finalData.length > 0) {\n\t\t\t\t\t\tcontroller.enqueue(finalData);\n\t\t\t\t\t}\n\t\t\t\t\tbaseStream.processor.cleanup();\n\t\t\t\t} catch (error) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tbaseStream.processor.cleanup();\n\t\t\t\t\t} catch (_) {\n\t\t\t\t\t\t// ignored\n\t\t\t\t\t}\n\t\t\t\t\tcontroller.error(error);\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t\tbaseStream.readable = transformStream.readable;\n\t\tbaseStream.writable = transformStream.writable;\n\t}\n}\n\nclass CompressionStream extends BaseStreamPolyfill {\n\tconstructor(format, options = {}) {\n\t\tconst level = options.level !== undefined ? options.level : DEFAULT_COMPRESSOR_LEVEL;\n\t\tconst computeCRC32 = options.computeCRC32 || false;\n\t\tsuper(format, ZlibCompressor, METHOD_COMPRESS, [level, format, computeCRC32]);\n\t}\n\n\tget crc32() {\n\t\treturn this.processor ? this.processor.crc32 : 0;\n\t}\n}\n\nclass DecompressionStream extends BaseStreamPolyfill {\n\tconstructor(format, options = {}) {\n\t\tconst computeCRC32 = options.expectedCRC32 !== undefined || (options.computeCRC32 !== undefined && options.computeCRC32 !== false);\n\t\tsuper(format, ZlibDecompressor, METHOD_DECOMPRESS, [format, computeCRC32, options.expectedCRC32]);\n\t}\n\n\tget crc32() {\n\t\treturn this.processor ? this.processor.crc32 : 0;\n\t}\n}\n\nexport { CompressionStream, DecompressionStream, initModule, clearBufferPool };\n\nfunction clearBufferPool() {\n\tbufferPool.clear();\n}\n\nfunction getWindowBits(format) {\n\tswitch (format) {\n\t\tcase FORMAT_DEFLATE:\n\t\t\treturn DEFLATE_WINDOW_BITS;\n\t\tcase FORMAT_DEFLATE_RAW:\n\t\t\treturn DEFLATE_RAW_WINDOW_BITS;\n\t\tcase FORMAT_GZIP:\n\t\t\treturn GZIP_WINDOW_BITS;\n\t\tdefault:\n\t\t\tthrow new Error(MSG_UNSUPPORTED_FORMAT + \": \" + format);\n\t}\n}\n\nfunction copyToWasmMemory(zlibModule, sourceData, targetPtr) {\n\tzlibModule.HEAPU8.set(sourceData, targetPtr);\n}\n\nfunction copyFromWasmMemory(zlibModule, sourcePtr, length) {\n\tif (length === 0) {\n\t\treturn new Uint8Array(0);\n\t}\n\tconst buffer = bufferPool.get(length);\n\tbuffer.set(zlibModule.HEAPU8.subarray(sourcePtr, sourcePtr + length));\n\treturn buffer.subarray(0, length);\n}\n\nfunction initStream(zlibModule, streamPtr) {\n\tzlibModule.HEAPU8.fill(0, streamPtr, streamPtr + STREAM_STRUCT_SIZE);\n}\n\nfunction convertChunkToUint8Array(chunk) {\n\tif (chunk instanceof ArrayBuffer) {\n\t\treturn new Uint8Array(chunk);\n\t} else if (chunk instanceof Uint8Array) {\n\t\treturn chunk;\n\t} else if (ArrayBuffer.isView(chunk)) {\n\t\treturn new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength);\n\t}\n}\n","import { CompressionStream, DecompressionStream, initModule } from \"./mod.js\";\nimport wasmBase64 from \"../dist-wasm/zlib-module.wasm?embed\";\nimport moduleCode from \"../dist-wasm/zlib-module.js?raw\";\n\nconst wasmBinary = Uint8Array.from(atob(wasmBase64), (c) => c.charCodeAt(0));\ninitModule(moduleCode, wasmBinary);\n\nexport { CompressionStream, DecompressionStream };\n","export default \"var ZlibModule=(()=>{var e=\\\"undefined\\\"!=typeof document?document.currentScript?.src:void 0;return async function(t={}){var r=t,n=\\\"object\\\"==typeof window,a=\\\"undefined\\\"!=typeof WorkerGlobalScope;a&&(e=self.location.href);var i,o,s=\\\"\\\";if(n||a){try{s=new URL(\\\".\\\",e).href}catch{}a&&(o=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),i=async e=>{if(m(e))return new Promise((t,r)=>{var n=new XMLHttpRequest;n.open(\\\"GET\\\",e,!0),n.responseType=\\\"arraybuffer\\\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r(n.status)},n.onerror=r,n.send(null)});var t=await fetch(e,{credentials:\\\"same-origin\\\"});if(t.ok)return t.arrayBuffer();throw Error(t.status+\\\" : \\\"+t.url)}}var f,u,l,c,d,p,y,w=console.error.bind(console),h=!1,m=e=>e.startsWith(\\\"file://\\\"),v=!1;function b(){var e=d.buffer;r.HEAP8=p=new Int8Array(e),new Int16Array(e),r.HEAPU8=y=new Uint8Array(e),new Uint16Array(e),r.HEAP32=new Int32Array(e),r.HEAPU32=new Uint32Array(e),new Float32Array(e),new Float64Array(e),new BigInt64Array(e),new BigUint64Array(e)}var g,A=0,R=null;function E(e){throw r.onAbort?.(e),w(e=\\\"Aborted(\\\"+e+\\\")\\\"),h=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),c?.(e),e}async function I(e,t){try{var r=await async function(e){if(!f)try{var t=await i(e);return new Uint8Array(t)}catch{}if(e==g&&f)e=new Uint8Array(f);else{if(!o)throw\\\"both async and sync fetching of the wasm failed\\\";e=o(e)}return e}(e);return await WebAssembly.instantiate(r,t)}catch(e){w(\\\"\\\"),E(e)}}class _{name=\\\"ExitStatus\\\";constructor(e){this.message=\\\"\\\",this.status=e}}var k,x,M=e=>{for(;0<e.length;)e.shift()(r)},T=[],U=[],B=()=>{var e=r.preRun.shift();U.push(e)},S=!0,W=0,P={},F=e=>{if(!(e instanceof _||\\\"unwind\\\"==e))throw e},H=e=>{throw u=e,S||0<W||(r.onExit?.(e),h=!0),new _(e)},j=new TextDecoder,L=e=>{const t=e.length;return[t%128|128,t>>7,...e]},Z={i:127,p:127,j:126,f:125,d:124,e:111},q=e=>L(Array.from(e,e=>Z[e])),z=[];r.noExitRuntime&&(S=r.noExitRuntime),r.printErr&&(w=r.printErr),r.wasmBinary&&(f=r.wasmBinary),r.ccall=(e,t,n,a)=>{var i={string:e=>{var t=0;if(null!=e&&0!==e){for(var r=t=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}var a=t+1;if(r=t=$(a),n=y,0<a){a=r+a-1;for(var i=0;i<e.length;++i){var o=e.codePointAt(i);if(127>=o){if(r>=a)break;n[r++]=o}else if(2047>=o){if(r+1>=a)break;n[r++]=192|o>>6,n[r++]=128|63&o}else if(65535>=o){if(r+2>=a)break;n[r++]=224|o>>12,n[r++]=128|o>>6&63,n[r++]=128|63&o}else{if(r+3>=a)break;n[r++]=240|o>>18,n[r++]=128|o>>12&63,n[r++]=128|o>>6&63,n[r++]=128|63&o,i++}}n[r]=0}}return t},array:e=>{var t=$(e.length);return p.set(e,t),t}};e=r[\\\"_\\\"+e];var o=[],s=0;if(a)for(var f=0;f<a.length;f++){var u=i[n[f]];u?(0===s&&(s=X()),o[f]=u(a[f])):o[f]=a[f]}return function(e){if(0!==s&&G(s),\\\"string\\\"===t)if(e){for(var r=e,n=y,a=r+void 0;n[r]&&!(r>=a);)++r;e=j.decode(y.subarray(e,r))}else e=\\\"\\\";else e=\\\"boolean\\\"===t?!!e:e;return e}(n=e(...o))},r.addFunction=(e,t)=>{if(!x){x=new WeakMap;var r=k.length;if(x)for(var n=0;n<0+r;n++){var a=k.get(n);a&&x.set(a,n)}}if(r=x.get(e)||0)return r;r=z.length?z.pop():k.grow(1);try{k.set(r,e)}catch(n){if(!(n instanceof TypeError))throw n;t=Uint8Array.of(0,97,115,109,1,0,0,0,1,...L([1,96,...q(t.slice(1)),...q(\\\"v\\\"===t[0]?\\\"\\\":t[0])]),2,7,1,1,101,1,102,0,0,7,5,1,1,102,0,0),t=new WebAssembly.Module(t),t=new WebAssembly.Instance(t,{e:{f:e}}).exports.f,k.set(r,t)}return x.set(e,r),r},r.removeFunction=e=>{x.delete(k.get(e)),k.set(e,null),z.push(e)};var D,G,$,X,C={c:()=>E(\\\"\\\"),b:()=>{S=!1,W=0},d:(e,t)=>{if(P[e]&&(clearTimeout(P[e].id),delete P[e]),!t)return 0;var r=setTimeout(()=>{delete P[e],(e=>{if(!h)try{if(e(),!(S||0<W))try{u=e=u,H(e)}catch(e){F(e)}}catch(e){F(e)}})(()=>D(e,performance.now()))},t);return P[e]={id:r,A:t},0},e:e=>{var t=y.length;if(2147483648<(e>>>=0))return!1;for(var r=1;4>=r;r*=2){var n=t*(1+.2/r);n=Math.min(n,e+100663296);e:{n=(Math.min(2147483648,65536*Math.ceil(Math.max(e,n)/65536))-d.buffer.byteLength+65535)/65536|0;try{d.grow(n),b();var a=1;break e}catch(e){}a=void 0}if(a)return!0}return!1},a:H},N=await async function(){function e(e){return N=e.exports,d=N.f,b(),k=N.t,e=N,r._deflate=e.g,r._deflateEnd=e.h,r._crc32=e.i,r._deflateInit2_=e.j,r._inflateInit2_=e.k,r._inflate=e.l,r._inflateEnd=e.m,r._malloc=e.n,r._free=e.o,r._inflateBack9Init_=e.p,r._inflateBack9=e.q,r._inflateBack9End=e.r,D=e.s,G=e.u,$=e.v,X=e.w,A--,r.monitorRunDependencies?.(A),0==A&&R&&(e=R,R=null,e()),N}A++,r.monitorRunDependencies?.(A);var t={a:C};return r.instantiateWasm?new Promise(n=>{r.instantiateWasm(t,(t,r)=>{n(e(t))})}):(g??=r.locateFile?r.locateFile(\\\"zlib-module.wasm\\\",s):s+\\\"zlib-module.wasm\\\",e((await async function(e){var t=g;if(!f&&!m(t))try{var r=fetch(t,{credentials:\\\"same-origin\\\"});return await WebAssembly.instantiateStreaming(r,e)}catch(e){w(\\\"\\\"),w(\\\"falling back to ArrayBuffer instantiation\\\")}return I(t,e)}(t)).instance))}();if(r.preInit)for(\\\"function\\\"==typeof r.preInit&&(r.preInit=[r.preInit]);0<r.preInit.length;)r.preInit.shift()();return function e(){function t(){if(r.calledRun=!0,!h){if(v=!0,l?.(r),r.onRuntimeInitialized?.(),r.postRun)for(\\\"function\\\"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;){var e=r.postRun.shift();T.push(e)}M(T)}}if(0<A)R=e;else{if(r.preRun)for(\\\"function\\\"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)B();M(U),0<A?R=e:r.setStatus?(r.setStatus(\\\"Running...\\\"),setTimeout(()=>{setTimeout(()=>r.setStatus(\\\"\\\"),1),t()},1)):t()}}(),v?r:new Promise((e,t)=>{l=e,c=t})}})();\\\"object\\\"==typeof exports&&\\\"object\\\"==typeof module?(module.exports=ZlibModule,module.exports.default=ZlibModule):\\\"function\\\"==typeof define&&define.amd&&define([],()=>ZlibModule);\"","export default \"\";"],"names":["STREAM_STRUCT_SIZE","FORMAT_DEFLATE","FORMAT_DEFLATE_RAW","FORMAT_DEFLATE64_RAW","ZLIB_VERSION","FUNC_MALLOC","FUNC_FREE","FUNC_CRC32","TYPE_NUMBER","TYPE_STRING","FLUSH_MODE_AUTO","FLUSH_MODES","none","partial","sync","full","finish","auto","zlibModule","zlibModulePromise","bufferPool","constructor","this","pools","Map","maxPoolSize","get","size","has","set","pool","length","pop","Uint8Array","release","buffer","push","clear","ZlibCompressor","level","format","computeCRC32","zlibCompressor","streamPtr","inputPtr","outputPtr","inputSize","outputSize","isRawFormat","crc32","initialize","initStream","result","ccall","getWindowBits","Error","MSG_COMPRESSION_INIT_FAILED","compress","data","flushMode","results","offset","chunkSize","Math","min","chunk","slice","isLastChunk","chunkResult","compressSingleChunk","totalLength","reduce","sum","combined","combinedOffset","subarray","MSG_CHUNK_SIZE_EXCEEDED","tempPtr","HEAPU8","copyToWasmMemory","streamPtrU32","HEAPU32","flushType","MSG_COMPRESSION_FAILED","availOut","outputLength","copyFromWasmMemory","finalData","cleanup","ZlibDecompressor","expectedCRC32","zlibDecompressor","windowPtr","isDeflate64","MSG_DECOMPRESSION_INIT_FAILED","decompress","decompressDeflate64","totalInputProcessed","remainingInput","inputChunkSize","MSG_DECOMPRESSION_FAILED","outputChunk","output","deflate64Complete","deflate64InputBuffer","newBuffer","deflate64StreamStarted","inputData","max","inFunc","addFunction","_","bufPtr","outFunc","buf","len","removeFunction","outputOffset","MSG_CRC32_MISMATCH","toString","toUpperCase","padStart","BaseStreamPolyfill","processorClass","methodName","processorArgs","baseStream","processor","_createTransformStream","ProcessorClass","transformStream","TransformStream","start","async","transform","controller","ArrayBuffer","isView","byteOffset","byteLength","convertChunkToUint8Array","enqueue","flush","error","readable","writable","CompressionStream","options","super","DecompressionStream","MSG_UNSUPPORTED_FORMAT","sourceData","targetPtr","sourcePtr","fill","moduleCode","wasmBinary","ZlibModuleFactory","Function","moduleFunction","initModule","from","atob","c","charCodeAt"],"mappings":"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"}