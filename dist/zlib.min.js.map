{"version":3,"file":"zlib.min.js","sources":["../src/mod.js","../src/bundle.js","../dist-wasm/zlib-module.js?raw","../dist-wasm/zlib-module.wasm?embed"],"sourcesContent":["// deno-lint-ignore-file no-this-alias\n/**\n * CompressionStream & DecompressionStream Polyfill\n */\n\n// zlib constants\nconst Z_NO_FLUSH = 0;\nconst Z_PARTIAL_FLUSH = 1;\nconst Z_SYNC_FLUSH = 2;\nconst Z_FULL_FLUSH = 3;\nconst Z_FINISH = 4;\nconst Z_OK = 0;\nconst Z_STREAM_END = 1;\nconst Z_DEFAULT_COMPRESSION = -1;\nconst Z_BUF_ERROR = -5;\n\n// Buffer sizes\nconst DEFAULT_INPUT_SIZE = 32768;\nconst DEFAULT_OUTPUT_SIZE = 32768;\nconst STREAM_STRUCT_SIZE = 56;\nconst DEFLATE64_WINDOW_SIZE = 65536;\n\n// Format strings\nconst FORMAT_DEFLATE = \"deflate\";\nconst FORMAT_DEFLATE_RAW = \"deflate-raw\";\nconst FORMAT_GZIP = \"gzip\";\nconst FORMAT_DEFLATE64 = \"deflate64\";\nconst FORMAT_DEFLATE64_RAW = \"deflate64-raw\";\n\n// Window bits for different formats\nconst DEFLATE_WINDOW_BITS = 15;\nconst DEFLATE_RAW_WINDOW_BITS = -15;\nconst GZIP_WINDOW_BITS = 31;\n\n// Method constants\nconst DEFLATE_METHOD = 8;\nconst DEFLATE_MEM_LEVEL = 8;\nconst DEFLATE_STRATEGY = 0;\n\n// Function signatures for emscripten\nconst SIGNATURE_III = \"iii\";\nconst SIGNATURE_IIII = \"iiii\";\n\n// zlib version string\nconst ZLIB_VERSION = \"1.3.1.1-motley\";\n\n// Function names\nconst FUNC_DEFLATE_INIT2 = \"deflateInit2_\";\nconst FUNC_INFLATE_INIT2 = \"inflateInit2_\";\nconst FUNC_INFLATE_BACK9_INIT = \"inflateBack9Init_\";\nconst FUNC_INFLATE_BACK9 = \"inflateBack9\";\nconst FUNC_DEFLATE = \"_deflate\";\nconst FUNC_INFLATE = \"_inflate\";\nconst FUNC_DEFLATE_END = \"_deflateEnd\";\nconst FUNC_INFLATE_END = \"_inflateEnd\";\nconst FUNC_INFLATE_BACK9_END = \"_inflateBack9End\";\nconst FUNC_MALLOC = \"_malloc\";\nconst FUNC_FREE = \"_free\";\nconst FUNC_CRC32 = \"_crc32\";\n\n// Method names\nconst METHOD_COMPRESS = \"compress\";\nconst METHOD_DECOMPRESS = \"decompress\";\n\n// Type names\nconst TYPE_NUMBER = \"number\";\nconst TYPE_STRING = \"string\";\n\n// Other constants\nconst FLUSH_MODE_AUTO = \"auto\";\nconst HEX_PAD_LENGTH = 8;\nconst HEX_PAD_CHAR = '0';\nconst DEFAULT_COMPRESSOR_LEVEL = 6;\n\n// Error messages\nconst MSG_COMPRESSION_INIT_FAILED = \"Compression initialization failed\";\nconst MSG_DECOMPRESSION_INIT_FAILED = \"Decompression initialization failed\";\nconst MSG_COMPRESSION_FAILED = \"Compression failed\";\nconst MSG_DECOMPRESSION_FAILED = \"Decompression failed\";\nconst MSG_DEFLATE64_DECOMPRESSION_FAILED = \"Deflate64 decompression failed with error code\";\nconst MSG_DEFLATE64_DECOMPRESSION_INCOMPLETE = \"Deflate64 decompression incomplete: expected end of stream but got error code\";\nconst MSG_CRC32_MISMATCH = \"CRC32 mismatch: expected\";\nconst MSG_CHUNK_SIZE_EXCEEDED = \"Chunk size\";\nconst MSG_EXCEEDS_BUFFER_SIZE = \"exceeds buffer size\";\nconst MSG_UNSUPPORTED_FORMAT = \"Unsupported format\";\n\nconst FLUSH_MODES = {\n\tnone: Z_NO_FLUSH,\n\tpartial: Z_PARTIAL_FLUSH,\n\tsync: Z_SYNC_FLUSH,\n\tfull: Z_FULL_FLUSH,\n\tfinish: Z_FINISH,\n\tauto: Z_NO_FLUSH,\n};\n\nlet zlibModule, zlibModulePromise;\n\nclass BufferPool {\n\tconstructor() {\n\t\tconst bufferPool = this;\n\t\tbufferPool.pools = new Map();\n\t\tbufferPool.maxPoolSize = 8;\n\t}\n\n\tget(size) {\n\t\tconst bufferPool = this;\n\t\tif (!bufferPool.pools.has(size)) {\n\t\t\tbufferPool.pools.set(size, []);\n\t\t}\n\t\tconst pool = bufferPool.pools.get(size);\n\t\tif (pool.length > 0) {\n\t\t\treturn pool.pop();\n\t\t}\n\t\treturn new Uint8Array(size);\n\t}\n\n\trelease(buffer) {\n\t\tconst bufferPool = this;\n\t\tconst size = buffer.length;\n\t\tif (!bufferPool.pools.has(size)) {\n\t\t\tbufferPool.pools.set(size, []);\n\t\t}\n\t\tconst pool = bufferPool.pools.get(size);\n\t\tif (pool.length < bufferPool.maxPoolSize) {\n\t\t\tpool.push(buffer);\n\t\t}\n\t}\n\n\tclear() {\n\t\tconst bufferPool = this;\n\t\tbufferPool.pools.clear();\n\t}\n}\n\nconst bufferPool = new BufferPool();\n\nfunction initModule(moduleCode, wasmBinary) {\n\tconst moduleFunction = new Function([], moduleCode + \";return ZlibModule\");\n\tconst ZlibModuleFactory = moduleFunction([]);\n\tzlibModulePromise = ZlibModuleFactory({ wasmBinary });\n}\n\nclass ZlibCompressor {\n\tconstructor(level = Z_DEFAULT_COMPRESSION, format = FORMAT_DEFLATE, computeCRC32 = false) {\n\t\tconst zlibCompressor = this;\n\t\tzlibCompressor.level = level;\n\t\tzlibCompressor.format = format;\n\t\tzlibCompressor.streamPtr = null;\n\t\tzlibCompressor.inputPtr = null;\n\t\tzlibCompressor.outputPtr = null;\n\t\tzlibCompressor.inputSize = DEFAULT_INPUT_SIZE;\n\t\tzlibCompressor.outputSize = DEFAULT_OUTPUT_SIZE;\n\t\tconst isRawFormat = format === FORMAT_DEFLATE_RAW;\n\t\tzlibCompressor.computeCRC32 = isRawFormat && computeCRC32;\n\t\tzlibCompressor.crc32 = 0;\n\t}\n\n\tasync initialize() {\n\t\tconst zlibCompressor = this;\n\t\tif (!zlibModule) {\n\t\t\tzlibModule = await zlibModulePromise;\n\t\t}\n\t\tzlibCompressor.streamPtr = zlibModule[FUNC_MALLOC](STREAM_STRUCT_SIZE);\n\t\tzlibCompressor.inputPtr = zlibModule[FUNC_MALLOC](zlibCompressor.inputSize);\n\t\tzlibCompressor.outputPtr = zlibModule[FUNC_MALLOC](zlibCompressor.outputSize);\n\t\tinitStream(zlibModule, zlibCompressor.streamPtr);\n\t\tconst result = zlibModule.ccall(FUNC_DEFLATE_INIT2, TYPE_NUMBER, [\n\t\t\tTYPE_NUMBER,\n\t\t\tTYPE_NUMBER,\n\t\t\tTYPE_NUMBER,\n\t\t\tTYPE_NUMBER,\n\t\t\tTYPE_NUMBER,\n\t\t\tTYPE_NUMBER,\n\t\t\tTYPE_STRING,\n\t\t\tTYPE_NUMBER,\n\t\t], [zlibCompressor.streamPtr, zlibCompressor.level, DEFLATE_METHOD, getWindowBits(zlibCompressor.format), DEFLATE_MEM_LEVEL, DEFLATE_STRATEGY, ZLIB_VERSION, STREAM_STRUCT_SIZE]);\n\t\tif (result !== 0) {\n\t\t\tthrow new Error(MSG_COMPRESSION_INIT_FAILED + \": \" + result);\n\t\t}\n\t}\n\n\tcompress(data, finish = false, flushMode = FLUSH_MODE_AUTO) {\n\t\tconst zlibCompressor = this;\n\t\tif (data.length === 0 && !finish) {\n\t\t\treturn new Uint8Array(0);\n\t\t}\n\t\tif (data.length > zlibCompressor.inputSize) {\n\t\t\tconst results = [];\n\t\t\tlet offset = 0;\n\t\t\twhile (offset < data.length) {\n\t\t\t\tconst chunkSize = Math.min(zlibCompressor.inputSize, data.length - offset);\n\t\t\t\tconst chunk = data.slice(offset, offset + chunkSize);\n\t\t\t\tconst isLastChunk = offset + chunkSize >= data.length;\n\t\t\t\tconst chunkResult = zlibCompressor.compressSingleChunk(chunk, finish && isLastChunk, flushMode);\n\t\t\t\tif (chunkResult.length > 0) {\n\t\t\t\t\tresults.push(chunkResult);\n\t\t\t\t}\n\t\t\t\toffset += chunkSize;\n\t\t\t}\n\t\t\tconst totalLength = results.reduce((sum, chunk) => sum + chunk.length, 0);\n\t\t\tconst combined = bufferPool.get(totalLength);\n\t\t\tlet combinedOffset = 0;\n\t\t\tfor (const result of results) {\n\t\t\t\tcombined.set(result, combinedOffset);\n\t\t\t\tcombinedOffset += result.length;\n\t\t\t}\n\t\t\treturn combined.subarray(0, totalLength);\n\t\t}\n\t\treturn zlibCompressor.compressSingleChunk(data, finish, flushMode);\n\t}\n\n\tcompressSingleChunk(data, finish = false, flushMode = FLUSH_MODE_AUTO) {\n\t\tconst zlibCompressor = this;\n\t\tif (data.length > zlibCompressor.inputSize) {\n\t\t\tthrow new Error(MSG_CHUNK_SIZE_EXCEEDED + \" \" + data.length + \" \" + MSG_EXCEEDS_BUFFER_SIZE + \" \" + zlibCompressor.inputSize);\n\t\t}\n\t\tif (zlibCompressor.level === 0 && zlibCompressor.format === FORMAT_DEFLATE_RAW) {\n\t\t\tif (zlibCompressor.computeCRC32 && data.length > 0) {\n\t\t\t\tconst tempPtr = zlibModule[FUNC_MALLOC](data.length);\n\t\t\t\ttry {\n\t\t\t\t\tzlibModule.HEAPU8.set(data, tempPtr);\n\t\t\t\t\tzlibCompressor.crc32 = zlibModule[FUNC_CRC32](zlibCompressor.crc32, tempPtr, data.length);\n\t\t\t\t} finally {\n\t\t\t\t\tzlibModule[FUNC_FREE](tempPtr);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn data;\n\t\t}\n\n\t\tcopyToWasmMemory(zlibModule, data, zlibCompressor.inputPtr);\n\t\tif (zlibCompressor.computeCRC32 && data.length > 0) {\n\t\t\tzlibCompressor.crc32 = zlibModule[FUNC_CRC32](zlibCompressor.crc32, zlibCompressor.inputPtr, data.length);\n\t\t}\n\t\tconst streamPtrU32 = zlibCompressor.streamPtr >>> 2;\n\t\tzlibModule.HEAPU32[streamPtrU32 + 0] = zlibCompressor.inputPtr;\n\t\tzlibModule.HEAPU32[streamPtrU32 + 1] = data.length;\n\t\tzlibModule.HEAPU32[streamPtrU32 + 3] = zlibCompressor.outputPtr;\n\t\tzlibModule.HEAPU32[streamPtrU32 + 4] = zlibCompressor.outputSize;\n\t\tconst flushType = finish ? Z_FINISH : (FLUSH_MODES[flushMode] || Z_NO_FLUSH);\n\t\tconst result = zlibModule[FUNC_DEFLATE](zlibCompressor.streamPtr, flushType);\n\t\tif (result < 0 || (finish && result !== Z_STREAM_END) || (!finish && result !== Z_OK)) {\n\t\t\tthrow new Error(MSG_COMPRESSION_FAILED + \": \" + result);\n\t\t}\n\t\tconst availOut = zlibModule.HEAPU32[streamPtrU32 + 4];\n\t\tconst outputLength = zlibCompressor.outputSize - availOut;\n\t\treturn copyFromWasmMemory(zlibModule, zlibCompressor.outputPtr, outputLength);\n\t}\n\n\tfinish() {\n\t\tconst zlibCompressor = this;\n\t\tconst finalData = zlibCompressor.compress(new Uint8Array(0), true);\n\t\tzlibCompressor.cleanup();\n\t\treturn finalData;\n\t}\n\n\tcleanup() {\n\t\tconst zlibCompressor = this;\n\t\tif (zlibModule && zlibCompressor.streamPtr) {\n\t\t\tzlibModule[FUNC_DEFLATE_END](zlibCompressor.streamPtr);\n\t\t\tzlibModule[FUNC_FREE](zlibCompressor.streamPtr);\n\t\t\tzlibModule[FUNC_FREE](zlibCompressor.inputPtr);\n\t\t\tzlibModule[FUNC_FREE](zlibCompressor.outputPtr);\n\t\t\tzlibCompressor.streamPtr = null;\n\t\t\tzlibCompressor.inputPtr = null;\n\t\t\tzlibCompressor.outputPtr = null;\n\t\t}\n\t}\n}\n\nclass ZlibDecompressor {\n\tconstructor(format = FORMAT_DEFLATE, computeCRC32 = false, expectedCRC32) {\n\t\tconst zlibDecompressor = this;\n\t\tzlibDecompressor.format = format;\n\t\tzlibDecompressor.streamPtr = null;\n\t\tzlibDecompressor.inputPtr = null;\n\t\tzlibDecompressor.outputPtr = null;\n\t\tzlibDecompressor.windowPtr = null;\n\t\tzlibDecompressor.inputSize = DEFAULT_INPUT_SIZE;\n\t\tzlibDecompressor.outputSize = DEFAULT_OUTPUT_SIZE;\n\t\tzlibDecompressor.isDeflate64 = format === FORMAT_DEFLATE64 || format === FORMAT_DEFLATE64_RAW;\n\t\tconst isRawFormat = format === FORMAT_DEFLATE_RAW || format === FORMAT_DEFLATE64_RAW;\n\t\tzlibDecompressor.computeCRC32 = isRawFormat && computeCRC32;\n\t\tzlibDecompressor.expectedCRC32 = expectedCRC32;\n\t\tzlibDecompressor.crc32 = 0;\n\t}\n\n\tasync initialize() {\n\t\tconst zlibDecompressor = this;\n\t\tif (!zlibModule) {\n\t\t\tzlibModule = await zlibModulePromise;\n\t\t}\n\t\tzlibDecompressor.streamPtr = zlibModule[FUNC_MALLOC](STREAM_STRUCT_SIZE);\n\t\tzlibDecompressor.inputPtr = zlibModule[FUNC_MALLOC](zlibDecompressor.inputSize);\n\t\tzlibDecompressor.outputPtr = zlibModule[FUNC_MALLOC](zlibDecompressor.outputSize);\n\t\tinitStream(zlibModule, zlibDecompressor.streamPtr);\n\t\tlet result;\n\t\tif (zlibDecompressor.isDeflate64) {\n\t\t\tzlibDecompressor.windowPtr = zlibModule[FUNC_MALLOC](DEFLATE64_WINDOW_SIZE);\n\t\t\tresult = zlibModule.ccall(FUNC_INFLATE_BACK9_INIT, TYPE_NUMBER, [TYPE_NUMBER, TYPE_NUMBER, TYPE_STRING, TYPE_NUMBER], [\n\t\t\t\tzlibDecompressor.streamPtr,\n\t\t\t\tzlibDecompressor.windowPtr,\n\t\t\t\tZLIB_VERSION,\n\t\t\t\tSTREAM_STRUCT_SIZE,\n\t\t\t]);\n\t\t} else {\n\t\t\tresult = zlibModule.ccall(FUNC_INFLATE_INIT2, TYPE_NUMBER, [TYPE_NUMBER, TYPE_NUMBER, TYPE_STRING, TYPE_NUMBER], [\n\t\t\t\tzlibDecompressor.streamPtr,\n\t\t\t\tgetWindowBits(zlibDecompressor.format),\n\t\t\t\tZLIB_VERSION,\n\t\t\t\tSTREAM_STRUCT_SIZE,\n\t\t\t]);\n\t\t}\n\t\tif (result !== 0) {\n\t\t\tthrow new Error(MSG_DECOMPRESSION_INIT_FAILED + \": \" + result);\n\t\t}\n\t}\n\n\tdecompress(data, finish = false, flushMode = FLUSH_MODE_AUTO) {\n\t\tconst zlibDecompressor = this;\n\t\tif (data.length === 0 && !finish) {\n\t\t\treturn new Uint8Array(0);\n\t\t}\n\t\tif (zlibDecompressor.isDeflate64) {\n\t\t\treturn zlibDecompressor.decompressDeflate64(data, finish);\n\t\t}\n\t\tconst results = [];\n\t\tlet totalInputProcessed = 0;\n\t\twhile (totalInputProcessed < data.length || finish) {\n\t\t\tconst remainingInput = data.length - totalInputProcessed;\n\t\t\tconst inputChunkSize = Math.min(remainingInput, zlibDecompressor.inputSize);\n\t\t\tif (inputChunkSize > 0) {\n\t\t\t\tcopyToWasmMemory(\n\t\t\t\t\tzlibModule,\n\t\t\t\t\tdata.subarray(totalInputProcessed, totalInputProcessed + inputChunkSize),\n\t\t\t\t\tzlibDecompressor.inputPtr,\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst streamPtrU32 = zlibDecompressor.streamPtr >>> 2;\n\t\t\tzlibModule.HEAPU32[streamPtrU32 + 0] = zlibDecompressor.inputPtr;\n\t\t\tzlibModule.HEAPU32[streamPtrU32 + 1] = inputChunkSize;\n\t\t\tzlibModule.HEAPU32[streamPtrU32 + 3] = zlibDecompressor.outputPtr;\n\t\t\tzlibModule.HEAPU32[streamPtrU32 + 4] = zlibDecompressor.outputSize;\n\t\t\tconst isLastChunk = totalInputProcessed + inputChunkSize >= data.length;\n\t\t\tconst flushType = (finish && isLastChunk) ? Z_FINISH : (FLUSH_MODES[flushMode] || Z_SYNC_FLUSH);\n\t\t\tconst result = zlibModule[FUNC_INFLATE](zlibDecompressor.streamPtr, flushType);\n\t\t\tif (result < 0 && result !== Z_BUF_ERROR) {\n\t\t\t\tthrow new Error(MSG_DECOMPRESSION_FAILED + \": \" + result);\n\t\t\t}\n\t\t\tconst availOut = zlibModule.HEAPU32[streamPtrU32 + 4];\n\t\t\tconst outputLength = zlibDecompressor.outputSize - availOut;\n\t\t\tif (outputLength > 0) {\n\t\t\t\tconst outputChunk = copyFromWasmMemory(zlibModule, zlibDecompressor.outputPtr, outputLength);\n\t\t\t\tif (zlibDecompressor.computeCRC32) {\n\t\t\t\t\tzlibDecompressor.crc32 = zlibModule[FUNC_CRC32](zlibDecompressor.crc32, zlibDecompressor.outputPtr, outputLength);\n\t\t\t\t}\n\t\t\t\tresults.push(outputChunk);\n\t\t\t}\n\t\t\tconst inputProcessed = zlibModule.HEAPU32[streamPtrU32 + 1];\n\t\t\ttotalInputProcessed += inputChunkSize - inputProcessed;\n\t\t\tif (result === Z_STREAM_END) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (finish && isLastChunk && result !== Z_STREAM_END) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (totalInputProcessed < data.length) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tconst totalLength = results.reduce((sum, chunk) => sum + chunk.length, 0);\n\t\tconst output = bufferPool.get(totalLength);\n\t\tlet offset = 0;\n\t\tfor (const chunk of results) {\n\t\t\toutput.set(chunk, offset);\n\t\t\toffset += chunk.length;\n\t\t}\n\t\treturn output.subarray(0, totalLength);\n\t}\n\n\tdecompressDeflate64(data, finish) {\n\t\tconst zlibDecompressor = this;\n\t\tif (zlibDecompressor.deflate64Complete) {\n\t\t\treturn new Uint8Array(0);\n\t\t}\n\t\tif (!zlibDecompressor.deflate64InputBuffer) {\n\t\t\tzlibDecompressor.deflate64InputBuffer = [];\n\t\t\tzlibDecompressor.deflate64InputBufferSize = 0;\n\t\t}\n\t\tif (data.length > 0) {\n\t\t\tzlibDecompressor.deflate64InputBuffer.push(data);\n\t\t\tzlibDecompressor.deflate64InputBufferSize += data.length;\n\t\t}\n\t\tif (!finish) {\n\t\t\treturn new Uint8Array(0);\n\t\t}\n\t\tconst combinedInput = new Uint8Array(zlibDecompressor.deflate64InputBufferSize);\n\t\tlet offset = 0;\n\t\tfor (const chunk of zlibDecompressor.deflate64InputBuffer) {\n\t\t\tcombinedInput.set(chunk, offset);\n\t\t\toffset += chunk.length;\n\t\t}\n\t\tcopyToWasmMemory(zlibModule, combinedInput, zlibDecompressor.inputPtr);\n\t\tconst results = [];\n\t\tconst inFunc = zlibModule.addFunction((_, bufPtr) => {\n\t\t\tif (combinedInput.length === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tzlibModule.HEAPU32[bufPtr >>> 2] = zlibDecompressor.inputPtr;\n\t\t\treturn combinedInput.length;\n\t\t}, SIGNATURE_III);\n\t\tconst outFunc = zlibModule.addFunction((_, buf, len) => {\n\t\t\tif (len > 0) {\n\t\t\t\tif (zlibDecompressor.computeCRC32) {\n\t\t\t\t\tzlibDecompressor.crc32 = zlibModule[FUNC_CRC32](zlibDecompressor.crc32, buf, len);\n\t\t\t\t}\n\t\t\t\tconst outputChunk = copyFromWasmMemory(zlibModule, buf, len);\n\t\t\t\tresults.push(outputChunk);\n\t\t\t}\n\t\t\treturn 0;\n\t\t}, SIGNATURE_IIII);\n\t\tconst result = zlibModule.ccall(FUNC_INFLATE_BACK9, TYPE_NUMBER, [TYPE_NUMBER, TYPE_NUMBER, TYPE_NUMBER, TYPE_NUMBER, TYPE_NUMBER], [\n\t\t\tzlibDecompressor.streamPtr,\n\t\t\tinFunc,\n\t\t\t0,\n\t\t\toutFunc,\n\t\t\t0,\n\t\t]);\n\t\tzlibModule.removeFunction(inFunc);\n\t\tzlibModule.removeFunction(outFunc);\n\t\tif (result === 1) {\n\t\t\tzlibDecompressor.deflate64Complete = true;\n\t\t\tzlibDecompressor.deflate64InputBuffer = [];\n\t\t\tzlibDecompressor.deflate64InputBufferSize = 0;\n\t\t}\n\t\tif (result < 0) {\n\t\t\tconst msg = MSG_DEFLATE64_DECOMPRESSION_FAILED;\n\t\t\tthrow new Error(msg + \": \" + result);\n\t\t}\n\t\tif (finish && result !== 1 && !zlibDecompressor.deflate64Complete) {\n\t\t\tconst msg = MSG_DEFLATE64_DECOMPRESSION_INCOMPLETE;\n\t\t\tthrow new Error(msg + \": \" + result);\n\t\t}\n\t\tconst totalLength = results.reduce((sum, chunk) => sum + chunk.length, 0);\n\t\tconst output = bufferPool.get(totalLength);\n\t\tlet outputOffset = 0;\n\t\tfor (const chunk of results) {\n\t\t\toutput.set(chunk, outputOffset);\n\t\t\toutputOffset += chunk.length;\n\t\t}\n\t\treturn output.subarray(0, totalLength);\n\t}\n\n\tfinish() {\n\t\tconst zlibDecompressor = this;\n\t\tconst finalData = zlibDecompressor.decompress(new Uint8Array(0), true);\n\t\tzlibDecompressor.cleanup();\n\t\tif (zlibDecompressor.expectedCRC32 !== undefined && zlibDecompressor.computeCRC32 && zlibDecompressor.crc32 !== zlibDecompressor.expectedCRC32) {\n\t\t\tthrow new Error(MSG_CRC32_MISMATCH + \" \" + zlibDecompressor.expectedCRC32.toString(16).toUpperCase().padStart(HEX_PAD_LENGTH, HEX_PAD_CHAR) + \", got \" + zlibDecompressor.crc32.toString(16).toUpperCase().padStart(HEX_PAD_LENGTH, HEX_PAD_CHAR));\n\t\t}\n\t\treturn finalData;\n\t}\n\n\tcleanup() {\n\t\tconst zlibDecompressor = this;\n\t\tif (zlibModule && zlibDecompressor.streamPtr) {\n\t\t\tif (zlibDecompressor.isDeflate64) {\n\t\t\t\tzlibModule[FUNC_INFLATE_BACK9_END](zlibDecompressor.streamPtr);\n\t\t\t\tif (zlibDecompressor.windowPtr) {\n\t\t\t\t\tzlibModule[FUNC_FREE](zlibDecompressor.windowPtr);\n\t\t\t\t\tzlibDecompressor.windowPtr = null;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tzlibModule[FUNC_INFLATE_END](zlibDecompressor.streamPtr);\n\t\t\t}\n\t\t\tzlibModule[FUNC_FREE](zlibDecompressor.streamPtr);\n\t\t\tzlibModule[FUNC_FREE](zlibDecompressor.inputPtr);\n\t\t\tzlibModule[FUNC_FREE](zlibDecompressor.outputPtr);\n\t\t\tzlibDecompressor.streamPtr = null;\n\t\t\tzlibDecompressor.inputPtr = null;\n\t\t\tzlibDecompressor.outputPtr = null;\n\t\t}\n\t}\n}\n\nclass BaseStreamPolyfill {\n\tconstructor(format, processorClass, methodName, processorArgs = []) {\n\t\tconst baseStream = this;\n\t\tbaseStream.format = format;\n\t\tbaseStream.processor = null;\n\t\tbaseStream._createTransformStream(processorClass, methodName, processorArgs);\n\t}\n\n\t_createTransformStream(ProcessorClass, methodName, processorArgs) {\n\t\tconst baseStream = this;\n\t\tconst transformStream = new TransformStream({\n\t\t\tstart: async () => {\n\t\t\t\tbaseStream.processor = new ProcessorClass(...processorArgs);\n\t\t\t\tawait baseStream.processor.initialize();\n\t\t\t},\n\t\t\ttransform: (chunk, controller) => {\n\t\t\t\tconst data = convertChunkToUint8Array(chunk);\n\t\t\t\tconst result = baseStream.processor[methodName](data, false);\n\t\t\t\tif (result.length > 0) {\n\t\t\t\t\tcontroller.enqueue(result);\n\t\t\t\t}\n\t\t\t},\n\t\t\tflush: (controller) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst finalData = baseStream.processor.finish();\n\t\t\t\t\tif (finalData.length > 0) {\n\t\t\t\t\t\tcontroller.enqueue(finalData);\n\t\t\t\t\t}\n\t\t\t\t\tbaseStream.processor.cleanup();\n\t\t\t\t} catch (error) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tbaseStream.processor.cleanup();\n\t\t\t\t\t} catch (_) {\n\t\t\t\t\t\t// ignored\n\t\t\t\t\t}\n\t\t\t\t\tcontroller.error(error);\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t\tbaseStream.readable = transformStream.readable;\n\t\tbaseStream.writable = transformStream.writable;\n\t}\n}\n\nclass CompressionStream extends BaseStreamPolyfill {\n\tconstructor(format, options = {}) {\n\t\tconst level = options.level !== undefined ? options.level : DEFAULT_COMPRESSOR_LEVEL;\n\t\tconst computeCRC32 = options.computeCRC32 || false;\n\t\tsuper(format, ZlibCompressor, METHOD_COMPRESS, [level, format, computeCRC32]);\n\t}\n\n\tget crc32() {\n\t\treturn this.processor ? this.processor.crc32 : 0;\n\t}\n}\n\nclass DecompressionStream extends BaseStreamPolyfill {\n\tconstructor(format, options = {}) {\n\t\tconst computeCRC32 = options.expectedCRC32 !== undefined || (options.computeCRC32 !== undefined && options.computeCRC32 !== false);\n\t\tsuper(format, ZlibDecompressor, METHOD_DECOMPRESS, [format, computeCRC32, options.expectedCRC32]);\n\t}\n\n\tget crc32() {\n\t\treturn this.processor ? this.processor.crc32 : 0;\n\t}\n}\n\nexport { CompressionStream, DecompressionStream, initModule, clearBufferPool };\n\nfunction clearBufferPool() {\n\tbufferPool.clear();\n}\n\nfunction getWindowBits(format) {\n\tswitch (format) {\n\t\tcase FORMAT_DEFLATE:\n\t\t\treturn DEFLATE_WINDOW_BITS;\n\t\tcase FORMAT_DEFLATE_RAW:\n\t\t\treturn DEFLATE_RAW_WINDOW_BITS;\n\t\tcase FORMAT_GZIP:\n\t\t\treturn GZIP_WINDOW_BITS;\n\t\tdefault:\n\t\t\tthrow new Error(MSG_UNSUPPORTED_FORMAT + \": \" + format);\n\t}\n}\n\nfunction copyToWasmMemory(zlibModule, sourceData, targetPtr) {\n\tzlibModule.HEAPU8.set(sourceData, targetPtr);\n}\n\nfunction copyFromWasmMemory(zlibModule, sourcePtr, length) {\n\tif (length === 0) {\n\t\treturn new Uint8Array(0);\n\t}\n\tconst buffer = bufferPool.get(length);\n\tbuffer.set(zlibModule.HEAPU8.subarray(sourcePtr, sourcePtr + length));\n\treturn buffer.subarray(0, length);\n}\n\nfunction initStream(zlibModule, streamPtr) {\n\tzlibModule.HEAPU8.fill(0, streamPtr, streamPtr + STREAM_STRUCT_SIZE);\n}\n\nfunction convertChunkToUint8Array(chunk) {\n\tif (chunk instanceof ArrayBuffer) {\n\t\treturn new Uint8Array(chunk);\n\t} else if (chunk instanceof Uint8Array) {\n\t\treturn chunk;\n\t} else if (ArrayBuffer.isView(chunk)) {\n\t\treturn new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength);\n\t}\n}\n","import { CompressionStream, DecompressionStream, initModule } from \"./mod.js\";\nimport wasmBase64 from \"../dist-wasm/zlib-module.wasm?embed\";\nimport moduleCode from \"../dist-wasm/zlib-module.js?raw\";\n\nconst wasmBinary = Uint8Array.from(atob(wasmBase64), (c) => c.charCodeAt(0));\ninitModule(moduleCode, wasmBinary);\n\nexport { CompressionStream, DecompressionStream };\n","export default \"var ZlibModule=(()=>{var e=\\\"undefined\\\"!=typeof document?document.currentScript?.src:void 0;return async function(t={}){var n=t,r=\\\"object\\\"==typeof window,a=\\\"undefined\\\"!=typeof WorkerGlobalScope;a&&(e=self.location.href);var i,o,s=\\\"\\\";if(r||a){try{s=new URL(\\\".\\\",e).href}catch{}a&&(o=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),i=async e=>{if(h(e))return new Promise((t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n(r.status)},r.onerror=n,r.send(null)});var t=await fetch(e,{credentials:\\\"same-origin\\\"});if(t.ok)return t.arrayBuffer();throw Error(t.status+\\\" : \\\"+t.url)}}var f,u,l,c,d,p,y,w=console.error.bind(console),m=!1,h=e=>e.startsWith(\\\"file://\\\"),v=!1,b=0,A=null;function g(e){throw n.onAbort?.(e),w(e=\\\"Aborted(\\\"+e+\\\")\\\"),m=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),c?.(e),e}async function R(e,t){try{var n=await async function(e){if(!f)try{var t=await i(e);return new Uint8Array(t)}catch{}if(e==y&&f)e=new Uint8Array(f);else{if(!o)throw\\\"both async and sync fetching of the wasm failed\\\";e=o(e)}return e}(e);return await WebAssembly.instantiate(n,t)}catch(e){w(\\\"\\\"),g(e)}}class E{name=\\\"ExitStatus\\\";constructor(e){this.message=\\\"\\\",this.status=e}}var I,_,k=e=>{for(;0<e.length;)e.shift()(n)},x=[],T=[],U=()=>{var e=n.preRun.shift();T.push(e)},B=!0,S=0,W={},M=e=>{if(!(e instanceof E||\\\"unwind\\\"==e))throw e},P=e=>{throw u=e,B||0<S||(n.onExit?.(e),m=!0),new E(e)},F=new TextDecoder,H=e=>{const t=e.length;return[t%128|128,t>>7,...e]},j={i:127,p:127,j:126,f:125,d:124,e:111},Z=e=>H(Array.from(e,e=>j[e])),q=[];n.noExitRuntime&&(B=n.noExitRuntime),n.printErr&&(w=n.printErr),n.wasmBinary&&(f=n.wasmBinary),n.ccall=(e,t,r,a)=>{var i={string:e=>{var t=0;if(null!=e&&0!==e){for(var n=t=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}var a=t+1;if(n=t=G(a),r=p,0<a){a=n+a-1;for(var i=0;i<e.length;++i){var o=e.codePointAt(i);if(127>=o){if(n>=a)break;r[n++]=o}else if(2047>=o){if(n+1>=a)break;r[n++]=192|o>>6,r[n++]=128|63&o}else if(65535>=o){if(n+2>=a)break;r[n++]=224|o>>12,r[n++]=128|o>>6&63,r[n++]=128|63&o}else{if(n+3>=a)break;r[n++]=240|o>>18,r[n++]=128|o>>12&63,r[n++]=128|o>>6&63,r[n++]=128|63&o,i++}}r[n]=0}}return t},array:e=>{var t=G(e.length);return d.set(e,t),t}};e=n[\\\"_\\\"+e];var o=[],s=0;if(a)for(var f=0;f<a.length;f++){var u=i[r[f]];u?(0===s&&(s=L()),o[f]=u(a[f])):o[f]=a[f]}return function(e){if(0!==s&&D(s),\\\"string\\\"===t)if(e){for(var n=e,r=p,a=n+void 0;r[n]&&!(n>=a);)++n;e=F.decode(p.subarray(e,n))}else e=\\\"\\\";else e=\\\"boolean\\\"===t?!!e:e;return e}(r=e(...o))},n.addFunction=(e,t)=>{if(!_){_=new WeakMap;var n=I.length;if(_)for(var r=0;r<0+n;r++){var a=I.get(r);a&&_.set(a,r)}}if(n=_.get(e)||0)return n;n=q.length?q.pop():I.grow(1);try{I.set(n,e)}catch(r){if(!(r instanceof TypeError))throw r;t=Uint8Array.of(0,97,115,109,1,0,0,0,1,...H([1,96,...Z(t.slice(1)),...Z(\\\"v\\\"===t[0]?\\\"\\\":t[0])]),2,7,1,1,101,1,102,0,0,7,5,1,1,102,0,0),t=new WebAssembly.Module(t),t=new WebAssembly.Instance(t,{e:{f:e}}).exports.f,I.set(n,t)}return _.set(e,n),n},n.removeFunction=e=>{_.delete(I.get(e)),I.set(e,null),q.push(e)};var z,D,G,L,O={c:()=>g(\\\"\\\"),b:()=>{B=!1,S=0},d:(e,t)=>{if(W[e]&&(clearTimeout(W[e].id),delete W[e]),!t)return 0;var n=setTimeout(()=>{delete W[e],(e=>{if(!m)try{if(e(),!(B||0<S))try{u=e=u,P(e)}catch(e){M(e)}}catch(e){M(e)}})(()=>z(e,performance.now()))},t);return W[e]={id:n,A:t},0},e:()=>{g(\\\"OOM\\\")},a:P},$=await async function(){function e(e){return $=e.exports,e=$.f.buffer,n.HEAP8=d=new Int8Array(e),new Int16Array(e),n.HEAPU8=p=new Uint8Array(e),new Uint16Array(e),n.HEAP32=new Int32Array(e),n.HEAPU32=new Uint32Array(e),new Float32Array(e),new Float64Array(e),new BigInt64Array(e),new BigUint64Array(e),I=$.t,e=$,n._deflate=e.g,n._deflateEnd=e.h,n._crc32=e.i,n._deflateInit2_=e.j,n._inflateInit2_=e.k,n._inflate=e.l,n._inflateEnd=e.m,n._malloc=e.n,n._free=e.o,n._inflateBack9Init_=e.p,n._inflateBack9=e.q,n._inflateBack9End=e.r,z=e.s,D=e.u,G=e.v,L=e.w,b--,n.monitorRunDependencies?.(b),0==b&&A&&(e=A,A=null,e()),$}b++,n.monitorRunDependencies?.(b);var t={a:O};return n.instantiateWasm?new Promise(r=>{n.instantiateWasm(t,(t,n)=>{r(e(t))})}):(y??=n.locateFile?n.locateFile(\\\"zlib-module.wasm\\\",s):s+\\\"zlib-module.wasm\\\",e((await async function(e){var t=y;if(!f&&!h(t))try{var n=fetch(t,{credentials:\\\"same-origin\\\"});return await WebAssembly.instantiateStreaming(n,e)}catch(e){w(\\\"\\\"),w(\\\"falling back to ArrayBuffer instantiation\\\")}return R(t,e)}(t)).instance))}();if(n.preInit)for(\\\"function\\\"==typeof n.preInit&&(n.preInit=[n.preInit]);0<n.preInit.length;)n.preInit.shift()();return function e(){function t(){if(n.calledRun=!0,!m){if(v=!0,l?.(n),n.onRuntimeInitialized?.(),n.postRun)for(\\\"function\\\"==typeof n.postRun&&(n.postRun=[n.postRun]);n.postRun.length;){var e=n.postRun.shift();x.push(e)}k(x)}}if(0<b)A=e;else{if(n.preRun)for(\\\"function\\\"==typeof n.preRun&&(n.preRun=[n.preRun]);n.preRun.length;)U();k(T),0<b?A=e:n.setStatus?(n.setStatus(\\\"Running...\\\"),setTimeout(()=>{setTimeout(()=>n.setStatus(\\\"\\\"),1),t()},1)):t()}}(),v?n:new Promise((e,t)=>{l=e,c=t})}})();\\\"object\\\"==typeof exports&&\\\"object\\\"==typeof module?(module.exports=ZlibModule,module.exports.default=ZlibModule):\\\"function\\\"==typeof define&&define.amd&&define([],()=>ZlibModule);\"","export default \"\";"],"names":["STREAM_STRUCT_SIZE","FORMAT_DEFLATE","FORMAT_DEFLATE_RAW","FORMAT_DEFLATE64_RAW","ZLIB_VERSION","FUNC_MALLOC","FUNC_FREE","FUNC_CRC32","TYPE_NUMBER","TYPE_STRING","FLUSH_MODE_AUTO","FLUSH_MODES","none","partial","sync","full","finish","auto","zlibModule","zlibModulePromise","bufferPool","constructor","this","pools","Map","maxPoolSize","get","size","has","set","pool","length","pop","Uint8Array","release","buffer","push","clear","ZlibCompressor","level","format","computeCRC32","zlibCompressor","streamPtr","inputPtr","outputPtr","inputSize","outputSize","isRawFormat","crc32","initialize","initStream","result","ccall","getWindowBits","Error","MSG_COMPRESSION_INIT_FAILED","compress","data","flushMode","results","offset","chunkSize","Math","min","chunk","slice","isLastChunk","chunkResult","compressSingleChunk","totalLength","reduce","sum","combined","combinedOffset","subarray","MSG_CHUNK_SIZE_EXCEEDED","tempPtr","HEAPU8","copyToWasmMemory","streamPtrU32","HEAPU32","flushType","MSG_COMPRESSION_FAILED","availOut","outputLength","copyFromWasmMemory","finalData","cleanup","ZlibDecompressor","expectedCRC32","zlibDecompressor","windowPtr","isDeflate64","MSG_DECOMPRESSION_INIT_FAILED","decompress","decompressDeflate64","totalInputProcessed","remainingInput","inputChunkSize","MSG_DECOMPRESSION_FAILED","outputChunk","output","deflate64Complete","deflate64InputBuffer","deflate64InputBufferSize","combinedInput","inFunc","addFunction","_","bufPtr","outFunc","buf","len","removeFunction","outputOffset","MSG_CRC32_MISMATCH","toString","toUpperCase","padStart","BaseStreamPolyfill","processorClass","methodName","processorArgs","baseStream","processor","_createTransformStream","ProcessorClass","transformStream","TransformStream","start","async","transform","controller","ArrayBuffer","isView","byteOffset","byteLength","convertChunkToUint8Array","enqueue","flush","error","readable","writable","CompressionStream","options","super","DecompressionStream","MSG_UNSUPPORTED_FORMAT","sourceData","targetPtr","sourcePtr","fill","moduleCode","wasmBinary","ZlibModuleFactory","Function","moduleFunction","initModule","from","atob","c","charCodeAt"],"mappings":"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"}